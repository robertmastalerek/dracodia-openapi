/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.1.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.dracodia.openapi.api;

import com.dracodia.openapi.model.CreateUserRequest;
import com.dracodia.openapi.model.User;
import com.dracodia.openapi.model.UserType;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import springfox.documentation.annotations.ApiIgnore;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-12-22T15:21:31.744693407+01:00[Europe/Warsaw]")
@Validated
@Api(value = "users", description = "the users API")
public interface UsersApi {

    default UsersApiDelegate getDelegate() {
        return new UsersApiDelegate() {};
    }

    /**
     * POST /users : Create user
     * Creates new user with given type
     *
     * @param createUserRequest Create user body (required)
     * @return successful operation (status code 200)
     */
    @ApiOperation(value = "Create user", nickname = "createUser", notes = "Creates new user with given type", response = User.class, tags={ "users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = User.class) })
    @PostMapping(
        value = "/users",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<User> createUser(@ApiParam(value = "Create user body" ,required=true )  @Valid @RequestBody CreateUserRequest createUserRequest) {
        return getDelegate().createUser(createUserRequest);
    }


    /**
     * GET /users : Get users list
     * Get users list
     *
     * @param userType user type (required)
     * @return OK (status code 200)
     */
    @ApiOperation(value = "Get users list", nickname = "usersList", notes = "Get users list", response = User.class, responseContainer = "List", tags={ "users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = User.class, responseContainer = "List") })
    @GetMapping(
        value = "/users",
        produces = { "application/json" }
    )
    default ResponseEntity<List<User>> usersList(@NotNull @ApiParam(value = "user type", required = true, allowableValues = "STANDARD, SPECIAL") @Valid @RequestParam(value = "userType", required = true) UserType userType) {
        return getDelegate().usersList(userType);
    }

}
